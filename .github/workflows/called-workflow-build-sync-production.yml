name: Build-Sync-Main

# the workflow will be called by others
on:
  workflow_call:
    inputs:
      doc-repo:
        required: true
        type: string
      doc-url:
        required: true
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  Build-And-Sync-To-Production:
    # The type of runner that the job will run on
    runs-on: [self-hosted, doc-build]
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a set of commands using the runners shell
      - name: Build the full site - main
        run: |
          cd ${{ runner.temp }}
          mkdir -p DocHome
          git clone --depth 1 https://github.com/dynamsoft-docs/${{ inputs.doc-repo }}.git ${{ inputs.doc-repo }}
          git clone --depth 1 https://github.com/dynamsoft-docs/Docs-Template-Repo.git Docs-Template-Repo
          cp -rfp ./${{ inputs.doc-repo }}/* ./DocHome/
          cp -rfp ./Docs-Template-Repo/* ./DocHome/
          # cd DocHome && bundle install && bundle exec jekyll build
          cd DocHome && bundle exec jekyll build

      - name: Sync files
        uses: SamKirkland/FTP-Deploy-Action@4.3.0
        with:
          server: ${{ secrets.FTP_DYNAMSOFT_LOCAL_SERVER }}
          username: ${{ secrets.FTP_DYNAMSOFT_LOCAL_USER }}
          password: ${{ secrets.FTP_DYNAMSOFT_LOCAL_PASSWORD }}
          port: 21 
          local-dir: ${{ runner.temp }}/DocHome/_site/
          server-dir: /www.dynamsoft.com/${{ inputs.doc-url }}/        

      - name: Trigger Webhook 
        run: | 
          curl -X POST -H "${{ secrets.WEBHOOK_USER }}" -H "${{ secrets.WEBHOOK_TOKEN }}" -H "Content-Type: application/json" -d "[\"/${{ inputs.doc-url }}/*\"]" ${{ secrets.WEBHOOK_URL }}

      - name: Update Sitemap 
        if: startsWith(inputs.doc-url, 'barcode-reader') || 
            startsWith(inputs.doc-url, 'capture-vision') || 
            startsWith(inputs.doc-url, 'label-recognition') || 
            startsWith(inputs.doc-url, 'document-normalizer') || 
            startsWith(inputs.doc-url, 'code-parser') || 
            startsWith(inputs.doc-url, 'camera-enhancer')
        run: |
          cd ${{ runner.temp }}/DocHome/assets/scripts/GenerateSitemap
          python3 GenerateSitemapByMenuTree.py --product dcv,dbr
          curl -T ${{ runner.temp }}/DocHome/assets/scripts/GenerateSitemap/barcode-reader/docs/menu-tree-sitemap.xml ftp://${{ secrets.FTP_DYNAMSOFT_LOCAL_SERVER }}/www.dynamsoft.com/barcode-reader/docs/ --user ${{ secrets.FTP_DYNAMSOFT_LOCAL_USER }}:${{ secrets.FTP_DYNAMSOFT_LOCAL_PASSWORD }}
          curl -T ${{ runner.temp }}/DocHome/assets/scripts/GenerateSitemap/capture-vision/docs/menu-tree-sitemap.xml ftp://${{ secrets.FTP_DYNAMSOFT_LOCAL_SERVER }}/www.dynamsoft.com/capture-vision/docs/ --user ${{ secrets.FTP_DYNAMSOFT_LOCAL_USER }}:${{ secrets.FTP_DYNAMSOFT_LOCAL_PASSWORD }}
